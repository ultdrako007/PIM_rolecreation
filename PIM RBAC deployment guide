# Gu√≠a Completa - Azure RBAC con PIM

## üéØ Diferencias Clave: Entra ID vs Azure RBAC

| Aspecto | Entra ID Roles | Azure RBAC Roles |
|---------|---------------|------------------|
| **¬øQu√© gestiona?** | Administraci√≥n del tenant (usuarios, grupos, aplicaciones) | Recursos de Azure (VMs, Storage, Networks) |
| **Scope** | Directorio (`/`) | Suscripci√≥n, Resource Group, o Recurso espec√≠fico |
| **API** | Microsoft Graph | Azure Resource Manager (ARM) |
| **M√≥dulo PowerShell** | `Microsoft.Graph.*` | `Az.Resources` |
| **Ejemplos de roles** | Global Admin, User Admin, Security Admin | Owner, Contributor, Reader, VM Contributor |
| **Portal** | Azure AD > Roles and administrators | Azure > Subscriptions > Access Control (IAM) |

---

## üìã Estructura del Scope de Azure

### Jerarqu√≠a de Scopes

```
Management Group (opcional)
  ‚îî‚îÄ‚îÄ Subscription
       ‚îî‚îÄ‚îÄ Resource Group
            ‚îî‚îÄ‚îÄ Resource
```

### Formato de Scopes

```powershell
# Nivel de Management Group
/providers/Microsoft.Management/managementGroups/mg-production

# Nivel de Suscripci√≥n (scope m√°s com√∫n)
/subscriptions/12345678-1234-1234-1234-123456789abc

# Nivel de Resource Group
/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-production

# Nivel de Recurso espec√≠fico (VM)
/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-compute/providers/Microsoft.Compute/virtualMachines/vm-web-01

# Nivel de Recurso espec√≠fico (Storage Account)
/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-data/providers/Microsoft.Storage/storageAccounts/stdatalake01

# Nivel de Recurso espec√≠fico (Web App)
/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-app/providers/Microsoft.Web/sites/webapp-prod
```

---

## üöÄ Inicio R√°pido - Roles Azure RBAC

### **1. Prerrequisitos**

```powershell
# Instalar m√≥dulo Az.Resources
Install-Module Az.Resources -Scope CurrentUser -Force

# Conectar a Azure
Connect-AzAccount

# Verificar suscripci√≥n activa
Get-AzContext

# Listar todas las suscripciones disponibles
Get-AzSubscription
```

### **2. Obtener IDs de Suscripci√≥n**

```powershell
# M√©todo 1: PowerShell
$subscription = Get-AzSubscription -SubscriptionName "Production"
$subscriptionId = $subscription.Id

Write-Host "Subscription ID: $subscriptionId"
Write-Host "Scope completo: /subscriptions/$subscriptionId"

# M√©todo 2: Azure CLI
az account show --query id -o tsv

# M√©todo 3: Portal Azure
# Azure Portal > Subscriptions > [Tu suscripci√≥n] > Overview
# Copiar "Subscription ID"
```

### **3. Listar Roles Disponibles**

```powershell
# Roles built-in de Azure
Get-AzRoleDefinition | Select-Object Name, Description | Sort-Object Name

# Roles m√°s comunes
Get-AzRoleDefinition | Where-Object { 
    $_.Name -in @('Owner', 'Contributor', 'Reader', 'User Access Administrator')
} | Format-Table Name, Description

# Buscar roles por keyword
Get-AzRoleDefinition | Where-Object { $_.Name -like "*Virtual Machine*" }
```

**Salida ejemplo:**
```
Name                                    Description
----                                    -----------
Owner                                   Grants full access to manage all resources
Contributor                             Can create and manage all types of Azure resources
Reader                                  Can view everything, but not make any changes
Virtual Machine Contributor             Lets you manage virtual machines, but not access to them
Storage Account Contributor             Lets you manage storage accounts
Network Contributor                     Lets you manage network resources
```

---

## üîë Roles Azure RBAC M√°s Comunes

### **Tier 0 - Cr√≠ticos (Acceso Administrativo Completo)**

| Rol | Descripci√≥n | Duraci√≥n Recomendada | Scope T√≠pico |
|-----|-------------|---------------------|--------------|
| **Owner** | Control total (recursos + permisos) | 4-8 horas | Suscripci√≥n / RG |
| **User Access Administrator** | Gesti√≥n de permisos sin tocar recursos | 4-8 horas | Suscripci√≥n |

### **Tier 1 - Administrativos (Gesti√≥n de Recursos)**

| Rol | Descripci√≥n | Duraci√≥n Recomendada | Scope T√≠pico |
|-----|-------------|---------------------|--------------|
| **Contributor** | Crear/gestionar recursos (sin asignar permisos) | 8-24 horas | RG espec√≠fico |
| **Virtual Machine Contributor** | Gestionar VMs | 1-7 d√≠as | RG de compute |
| **Storage Account Contributor** | Gestionar storage accounts | 1-7 d√≠as | RG de data |
| **Network Contributor** | Gestionar redes, NSGs, VNets | 1-7 d√≠as | RG de network |
| **SQL DB Contributor** | Gestionar SQL databases | 1-7 d√≠as | RG de databases |

### **Tier 2 - Operativos/Lectura**

| Rol | Descripci√≥n | Duraci√≥n Recomendada | Scope T√≠pico |
|-----|-------------|---------------------|--------------|
| **Reader** | Ver todos los recursos (sin modificar) | 30-90 d√≠as | Suscripci√≥n / RG |
| **Monitoring Reader** | Leer datos de monitoreo | 30-90 d√≠as | Suscripci√≥n |
| **Log Analytics Reader** | Ver y buscar logs | 30-90 d√≠as | Workspace espec√≠fico |
| **Backup Reader** | Ver configuraci√≥n de backups | 30 d√≠as | Recovery Services Vault |

---

## üìù Preparar CSV para Azure RBAC

### **Estructura del CSV**

```csv
PrincipalId,RoleDefinitionId,DirectoryScopeId,AzureRoleName,AzureScope,GroupId,Reason,Duration
```

**Campos espec√≠ficos para Azure RBAC:**
- `AzureRoleName`: Nombre exacto del rol (case-sensitive)
- `AzureScope`: Ruta completa del scope ARM
- Dejar vac√≠os: `RoleDefinitionId`, `DirectoryScopeId`, `GroupId`

### **Ejemplo 1: Owner de Suscripci√≥n**

```csv
PrincipalId,AzureRoleName,AzureScope,Reason,Duration
00000000-0000-0000-0000-000000000001,Owner,/subscriptions/12345678-1234-1234-1234-123456789abc,INC-001: Migraci√≥n cr√≠tica,PT4H
```

### **Ejemplo 2: Contributor en Resource Group**

```csv
PrincipalId,AzureRoleName,AzureScope,Reason,Duration
00000000-0000-0000-0000-000000000002,Contributor,/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-production,TASK-002: Deploy nueva app,PT8H
```

### **Ejemplo 3: VM Contributor en RG espec√≠fico**

```csv
PrincipalId,AzureRoleName,AzureScope,Reason,Duration
00000000-0000-0000-0000-000000000003,Virtual Machine Contributor,/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-compute,CHG-003: Resize VMs,P1D
```

### **Ejemplo 4: Reader de Recurso Espec√≠fico**

```csv
PrincipalId,AzureRoleName,AzureScope,Reason,Duration
00000000-0000-0000-0000-000000000004,Reader,/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-app/providers/Microsoft.Web/sites/webapp-prod,INC-004: Troubleshooting app,P7D
```

---

## üîß Scripts de Apoyo

### **Generar CSV desde Asignaciones Existentes**

```powershell
# Obtener todas las asignaciones permanentes en una suscripci√≥n
$subscriptionId = "12345678-1234-1234-1234-123456789abc"
$scope = "/subscriptions/$subscriptionId"

$assignments = Get-AzRoleAssignment -Scope $scope

$pimCsv = $assignments | ForEach-Object {
    # Filtrar solo roles cr√≠ticos que deber√≠an ser PIM
    if ($_.RoleDefinitionName -in @('Owner', 'Contributor', 'User Access Administrator')) {
        [PSCustomObject]@{
            PrincipalId = $_.ObjectId
            RoleDefinitionId = ''
            DirectoryScopeId = ''
            AzureRoleName = $_.RoleDefinitionName
            AzureScope = $_.Scope
            GroupId = ''
            Reason = "MIGRATION-2025: Conversi√≥n a PIM"
            Duration = 'PT8H'  # 8 horas para roles cr√≠ticos
        }
    }
}

$pimCsv | Export-Csv "migration_azure_roles_to_pim.csv" -NoTypeInformation
Write-Host "‚úì CSV generado con $($pimCsv.Count) asignaciones a migrar"
```

### **Validar Scopes Antes de Ejecutar**

```powershell
# Validar que un scope existe
function Test-AzureScope {
    param([string]$Scope)
    
    if ($Scope -match '/subscriptions/([^/]+)$') {
        # Es una suscripci√≥n
        $subId = $matches[1]
        $sub = Get-AzSubscription -SubscriptionId $subId -ErrorAction SilentlyContinue
        return ($null -ne $sub)
    }
    elseif ($Scope -match '/resourceGroups/([^/]+)$') {
        # Es un resource group
        $rg = Get-AzResourceGroup -Id $Scope -ErrorAction SilentlyContinue
        return ($null -ne $rg)
    }
    elseif ($Scope -match '/providers/') {
        # Es un recurso espec√≠fico
        $resource = Get-AzResource -ResourceId $Scope -ErrorAction SilentlyContinue
        return ($null -ne $resource)
    }
    
    return $false
}

# Validar CSV antes de ejecutar
$csv = Import-Csv "assignments.csv"
foreach ($row in $csv) {
    if ($row.AzureScope) {
        $exists = Test-AzureScope -Scope $row.AzureScope
        if (-not $exists) {
            Write-Warning "Scope no existe: $($row.AzureScope) para Principal $($row.PrincipalId)"
        }
    }
}
```

### **Obtener PrincipalId de Usuarios**

```powershell
# M√©todo 1: Desde email
$user = Get-AzADUser -UserPrincipalName "juan.perez@contoso.com"
Write-Host "PrincipalId: $($user.Id)"

# M√©todo 2: B√∫squeda por nombre
$users = Get-AzADUser -SearchString "Juan Perez"
$users | Select-Object DisplayName, UserPrincipalName, Id

# M√©todo 3: Service Principal (para aplicaciones)
$sp = Get-AzADServicePrincipal -DisplayName "MyApp"
Write-Host "PrincipalId: $($sp.Id)"

# M√©todo 4: Grupo
$group = Get-AzADGroup -DisplayName "DevOps Team"
Write-Host "PrincipalId: $($group.Id)"
```

---

## üé¨ Ejecuci√≥n del Script con Azure RBAC

### **Paso 1: Conectar a Azure y Microsoft Graph**

```powershell
# Conectar a Azure (para roles RBAC)
Connect-AzAccount

# Seleccionar suscripci√≥n si tienes m√∫ltiples
Set-AzContext -SubscriptionId "12345678-1234-1234-1234-123456789abc"

# Conectar a Microsoft Graph (para roles Entra ID si tambi√©n los usas)
Connect-MgGraph -Scopes "RoleEligibilitySchedule.ReadWrite.Directory"
```

### **Paso 2: Ejecutar en Modo Dry-Run**

```powershell
# SIEMPRE ejecutar primero en simulaci√≥n
.\PIM-SecureAssignment-ARM.ps1 `
    -CsvPath "assignments_azure_rbac.csv" `
    -Phase 1 `
    -SupportAzureRBAC `
    -DryRun
```

**Salida esperada:**
```
=== Validando Prerequisites Azure RBAC ===
‚úì M√≥dulo Az.Resources disponible
‚úì Conectado a Azure
  Suscripci√≥n: Production
  Cuenta: admin@contoso.com
‚úì Suscripciones accesibles: 3

[MODO DRY-RUN ACTIVO]

[1/5] Procesando Principal: 00000000-0000-0000-0000-000000000001
[DRY-RUN] Eligibilidad Azure para: 00000000-0000-0000-0000-000000000001
[DRY-RUN] Rol: Owner | Scope: /subscriptions/... | Duraci√≥n: PT4H

=== RESUMEN ===
Total:      5
Exitoso:    5
  - Roles Azure: 5
```

### **Paso 3: Ejecutar en Producci√≥n**

```powershell
# Con confirmaci√≥n interactiva
.\PIM-SecureAssignment-ARM.ps1 `
    -CsvPath "assignments_azure_rbac.csv" `
    -Phase 1 `
    -SupportAzureRBAC

# Sin confirmaci√≥n (automatizaci√≥n)
.\PIM-SecureAssignment-ARM.ps1 `
    -CsvPath "assignments_azure_rbac.csv" `
    -Phase 1 `
    -SupportAzureRBAC `
    -Force
```

### **Paso 4: Validar en Azure Portal**

1. **Azure Portal** > **Subscriptions**
2. Seleccionar tu suscripci√≥n
3. **Access Control (IAM)** > **Eligible assignments**
4. Verificar que las eligibilidades fueron creadas

---

## üîç Verificaci√≥n Manual

### **Listar Eligibilidades Existentes**

```powershell
# Para una suscripci√≥n completa
$scope = "/subscriptions/12345678-1234-1234-1234-123456789abc"
Get-AzRoleEligibilityScheduleInstance -Scope $scope -Filter "asTarget()"

# Para un usuario espec√≠fico
$principalId = "00000000-0000-0000-0000-000000000001"
Get-AzRoleEligibilityScheduleInstance -Scope $scope -Filter "asTarget()" |
    Where-Object { $_.PrincipalId -eq $principalId }

# Formatear salida
Get-AzRoleEligibilityScheduleInstance -Scope $scope -Filter "asTarget()" |
    Select-Object PrincipalDisplayName, RoleDefinitionDisplayName, Scope, 
                  @{N='StartDateTime';E={$_.StartDateTime}},
                  @{N='EndDateTime';E={$_.EndDateTime}} |
    Format-Table -AutoSize
```

### **Listar Asignaciones Activas (post-activaci√≥n)**

```powershell
# Ver qui√©n tiene roles activos AHORA
Get-AzRoleAssignmentScheduleInstance -Scope $scope -Filter "asTarget()" |
    Where-Object { $_.EndDateTime -gt (Get-Date) } |
    Select-Object PrincipalDisplayName, RoleDefinitionDisplayName, 
                  @{N='ExpiresAt';E={$_.EndDateTime}} |
    Format-Table -AutoSize
```

---

## ‚ö†Ô∏è Problemas Comunes y Soluciones

### **Error: "Scope does not exist"**

```powershell
# Verificar que el scope es correcto
$scope = "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/rg-production"

# Probar acceso
Get-AzResourceGroup -Id $scope

# Si falla, verificar formato:
# ‚úÖ CORRECTO: /subscriptions/xxx/resourceGroups/yyy
# ‚ùå INCORRECTO: /subscription/xxx/resourceGroup/yyy (singular)
# ‚ùå INCORRECTO: subscriptions/xxx/... (falta /)
```

### **Error: "Principal does not have authorization"**

La cuenta ejecutora necesita:
1. **Owner** o **User Access Administrator** en el scope
2. O rol personalizado con permisos:
   - `Microsoft.Authorization/roleEligibilityScheduleRequests/write`
   - `Microsoft.Authorization/roleAssignments/read`

```powershell
# Verificar permisos de la cuenta actual
$currentUser = (Get-AzContext).Account.Id
$currentUserObjectId = (Get-AzADUser -UserPrincipalName $currentUser).Id

Get-AzRoleAssignment -ObjectId $currentUserObjectId -Scope $scope
```

### **Error: "Role definition 'XYZ' does not exist"**

```powershell
# El nombre del rol es case-sensitive
# ‚ùå INCORRECTO: "owner", "OWNER"
# ‚úÖ CORRECTO: "Owner"

# Listar nombre exacto
Get-AzRoleDefinition -Name "Owner"  # Exacto
Get-AzRoleDefinition | Where-Object { $_.Name -like "*owner*" }  # B√∫squeda
```

### **Warning: "Duraci√≥n excede l√≠mite"**

Ajustar en la lista blanca del script:

```powershell
$script:AllowedAzureRoles = @{
    Tier0 = @{
        'Owner' = @{ 
            MaxDuration = 'PT8H'  # Cambiar seg√∫n tu pol√≠tica
            RequiresApproval = $true 
        }
    }
}
```

---

## üìä Mejores Pr√°cticas

### **1. Principio de Menor Privilegio**

```
‚ùå MAL:  Asignar Owner de suscripci√≥n completa
‚úÖ BIEN: Asignar Contributor solo en el Resource Group necesario

‚ùå MAL:  Asignar Contributor por 90 d√≠as
‚úÖ BIEN: Asignar rol espec√≠fico (VM Contributor) por 1-7 d√≠as
```

### **2. Granularidad de Scopes**

```powershell
# Orden de preferencia (de m√°s espec√≠fico a menos):
1. Recurso espec√≠fico:     /subscriptions/.../providers/Microsoft.Compute/virtualMachines/vm-01
2. Resource Group:         /subscriptions/.../resourceGroups/rg-production
3. Suscripci√≥n:            /subscriptions/...
4. Management Group:       Solo para escenarios muy espec√≠ficos
```

### **3. Duraciones Recomendadas por Rol**

```
Owner / User Access Admin:         4-8 horas
Contributor (suscripci√≥n):         8-24 horas
Contributor (resource group):      1-7 d√≠as
Roles espec√≠ficos (VM, Storage):   1-7 d√≠as
Reader:                            30-90 d√≠as
```

### **4. Auditor√≠a y Monitoreo**

```powershell
# Configurar alertas para activaciones de roles cr√≠ticos
# Azure Portal > Monitor > Alerts > New Alert Rule
# Condici√≥n: "Create role assignment" donde Role = "Owner"

# Revisar audit logs regularmente
Get-AzLog -ResourceProvider "Microsoft.Authorization" -StartTime (Get-Date).AddDays(-7) |
    Where-Object { $_.OperationName -like "*roleAssignment*" } |
    Select-Object TimeStamp, Caller, OperationName, Properties |
    Export-Csv "azure_rbac_audit.csv"
```

---

## üéØ Casos de Uso Reales

### **Caso 1: Despliegue de Aplicaci√≥n**

**Escenario**: DevOps necesita desplegar una nueva versi√≥n por 8 horas.

```csv
PrincipalId,AzureRoleName,AzureScope,Reason,Duration
devops-user-id,Contributor,/subscriptions/xxx/resourceGroups/rg-app-prod,DEPLOY-2025-001: Release v2.3.0,PT8H
```

### **Caso 2: Troubleshooting de VM**

**Escenario**: Sysadmin necesita acceso a VMs por 24 horas.

```csv
PrincipalId,AzureRoleName,AzureScope,Reason,Duration
sysadmin-user-id,Virtual Machine Contributor,/subscriptions/xxx/resourceGroups/rg-compute,INC-2025-042: Performance issues VMs,P1D
```

### **Caso 3: Auditor√≠a de Seguridad**

**Escenario**: Auditor necesita lectura por 30 d√≠as.

```csv
PrincipalId,AzureRoleName,AzureScope,Reason,Duration
auditor-user-id,Reader,/subscriptions/xxx,AUDIT-Q4-2025: Compliance review,P30D
```

---

## üîó Referencias

- [Azure RBAC Documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/)
- [Azure Built-in Roles](https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles)
- [PIM for Azure Resources](https://learn.microsoft.com/en-us/azure/active-directory/privileged-identity-management/pim-resource-roles-overview)
- [Az.Resources Module](https://learn.microsoft.com/en-us/powershell/module/az.resources/)

---

## ‚úÖ Checklist Pre-Ejecuci√≥n

Antes de ejecutar el script con `-SupportAzureRBAC`:

- [ ] M√≥dulo `Az.Resources` instalado
- [ ] Conectado a Azure con `Connect-AzAccount`
- [ ] Suscripci√≥n correcta seleccionada
- [ ] Scopes validados (existen en Azure)
- [ ] PrincipalIds correctos (GUIDs v√°lidos)
- [ ] Nombres de roles exactos (case-sensitive)
- [ ] Duraciones dentro de l√≠mites de pol√≠tica
- [ ] Justificaciones con tickets de cambio
- [ ] Dry-Run ejecutado exitosamente
- [ ] Cuenta ejecutora tiene permisos Owner/UAA
